"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/reactjs-popup";
exports.ids = ["vendor-chunks/reactjs-popup"];
exports.modules = {

/***/ "(ssr)/./node_modules/reactjs-popup/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/reactjs-popup/dist/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./reactjs-popup.cjs.development.js */ \"(ssr)/./node_modules/reactjs-popup/dist/reactjs-popup.cjs.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Rqcy1wb3B1cC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUNBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDBKQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXByb2plY3QvLi9ub2RlX21vZHVsZXMvcmVhY3Rqcy1wb3B1cC9kaXN0L2luZGV4LmpzPzIwMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWN0anMtcG9wdXAuY2pzLnByb2R1Y3Rpb24ubWluLmpzJylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFjdGpzLXBvcHVwLmNqcy5kZXZlbG9wbWVudC5qcycpXG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/reactjs-popup/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/reactjs-popup/dist/reactjs-popup.cjs.development.js":
/*!**************************************************************************!*\
  !*** ./node_modules/reactjs-popup/dist/reactjs-popup.cjs.development.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction _interopDefault(ex) {\n    return ex && typeof ex === \"object\" && \"default\" in ex ? ex[\"default\"] : ex;\n}\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar React__default = _interopDefault(React);\nvar ReactDOM = _interopDefault(__webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\"));\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nvar useOnEscape = function useOnEscape(handler, active) {\n    if (active === void 0) {\n        active = true;\n    }\n    React.useEffect(function() {\n        if (!active) return;\n        var listener = function listener(event) {\n            // check if key is an Escape\n            if (event.key === \"Escape\") handler(event);\n        };\n        document.addEventListener(\"keyup\", listener);\n        return function() {\n            if (!active) return;\n            document.removeEventListener(\"keyup\", listener);\n        };\n    }, [\n        handler,\n        active\n    ]);\n};\nvar useRepositionOnResize = function useRepositionOnResize(handler, active) {\n    if (active === void 0) {\n        active = true;\n    }\n    React.useEffect(function() {\n        if (!active) return;\n        var listener = function listener() {\n            handler();\n        };\n        window.addEventListener(\"resize\", listener);\n        return function() {\n            if (!active) return;\n            window.removeEventListener(\"resize\", listener);\n        };\n    }, [\n        handler,\n        active\n    ]);\n};\nvar useOnClickOutside = function useOnClickOutside(ref, handler, active) {\n    if (active === void 0) {\n        active = true;\n    }\n    React.useEffect(function() {\n        if (!active) return;\n        var listener = function listener(event) {\n            // Do nothing if clicking ref's element or descendent elements\n            var refs = Array.isArray(ref) ? ref : [\n                ref\n            ];\n            var contains = false;\n            refs.forEach(function(r) {\n                if (!r.current || r.current.contains(event.target)) {\n                    contains = true;\n                    return;\n                }\n            });\n            event.stopPropagation();\n            if (!contains) handler(event);\n        };\n        document.addEventListener(\"mousedown\", listener);\n        document.addEventListener(\"touchstart\", listener);\n        return function() {\n            if (!active) return;\n            document.removeEventListener(\"mousedown\", listener);\n            document.removeEventListener(\"touchstart\", listener);\n        };\n    }, [\n        ref,\n        handler,\n        active\n    ]);\n}; // Make sure that user is not able TAB out of the Modal content on Open\nvar useTabbing = function useTabbing(contentRef, active) {\n    if (active === void 0) {\n        active = true;\n    }\n    React.useEffect(function() {\n        if (!active) return;\n        var listener = function listener(event) {\n            // check if key is an Tab\n            if (event.keyCode === 9) {\n                var _contentRef$current;\n                var els = contentRef === null || contentRef === void 0 ? void 0 : (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex=\"0\"]');\n                var focusableEls = Array.prototype.slice.call(els);\n                if (focusableEls.length === 1) {\n                    event.preventDefault();\n                    return;\n                }\n                var firstFocusableEl = focusableEls[0];\n                var lastFocusableEl = focusableEls[focusableEls.length - 1];\n                if (event.shiftKey && document.activeElement === firstFocusableEl) {\n                    event.preventDefault();\n                    lastFocusableEl.focus();\n                } else if (document.activeElement === lastFocusableEl) {\n                    event.preventDefault();\n                    firstFocusableEl.focus();\n                }\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n        return function() {\n            if (!active) return;\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [\n        contentRef,\n        active\n    ]);\n};\nvar useIsomorphicLayoutEffect =  false ? 0 : React.useEffect;\nvar Style = {\n    popupContent: {\n        tooltip: {\n            position: \"absolute\",\n            zIndex: 999\n        },\n        modal: {\n            position: \"relative\",\n            margin: \"auto\"\n        }\n    },\n    popupArrow: {\n        height: \"8px\",\n        width: \"16px\",\n        position: \"absolute\",\n        background: \"transparent\",\n        color: \"#FFF\",\n        zIndex: -1\n    },\n    overlay: {\n        tooltip: {\n            position: \"fixed\",\n            top: \"0\",\n            bottom: \"0\",\n            left: \"0\",\n            right: \"0\",\n            zIndex: 999\n        },\n        modal: {\n            position: \"fixed\",\n            top: \"0\",\n            bottom: \"0\",\n            left: \"0\",\n            right: \"0\",\n            display: \"flex\",\n            zIndex: 999\n        }\n    }\n};\nvar POSITION_TYPES = [\n    \"top left\",\n    \"top center\",\n    \"top right\",\n    \"right top\",\n    \"right center\",\n    \"right bottom\",\n    \"bottom left\",\n    \"bottom center\",\n    \"bottom right\",\n    \"left top\",\n    \"left center\",\n    \"left bottom\"\n];\nvar getCoordinatesForPosition = function getCoordinatesForPosition(triggerBounding, ContentBounding, position, arrow, _ref) {\n    var offsetX = _ref.offsetX, offsetY = _ref.offsetY;\n    var margin = arrow ? 8 : 0;\n    var args = position.split(\" \"); // the step N 1 : center the popup content => ok\n    var CenterTop = triggerBounding.top + triggerBounding.height / 2;\n    var CenterLeft = triggerBounding.left + triggerBounding.width / 2;\n    var height = ContentBounding.height, width = ContentBounding.width;\n    var top = CenterTop - height / 2;\n    var left = CenterLeft - width / 2;\n    var transform = \"\";\n    var arrowTop = \"0%\";\n    var arrowLeft = \"0%\"; // the  step N 2 : => ok\n    switch(args[0]){\n        case \"top\":\n            top -= height / 2 + triggerBounding.height / 2 + margin;\n            transform = \"rotate(180deg)  translateX(50%)\";\n            arrowTop = \"100%\";\n            arrowLeft = \"50%\";\n            break;\n        case \"bottom\":\n            top += height / 2 + triggerBounding.height / 2 + margin;\n            transform = \"rotate(0deg) translateY(-100%) translateX(-50%)\";\n            arrowLeft = \"50%\";\n            break;\n        case \"left\":\n            left -= width / 2 + triggerBounding.width / 2 + margin;\n            transform = \" rotate(90deg)  translateY(50%) translateX(-25%)\";\n            arrowLeft = \"100%\";\n            arrowTop = \"50%\";\n            break;\n        case \"right\":\n            left += width / 2 + triggerBounding.width / 2 + margin;\n            transform = \"rotate(-90deg)  translateY(-150%) translateX(25%)\";\n            arrowTop = \"50%\";\n            break;\n    }\n    switch(args[1]){\n        case \"top\":\n            top = triggerBounding.top;\n            arrowTop = triggerBounding.height / 2 + \"px\";\n            break;\n        case \"bottom\":\n            top = triggerBounding.top - height + triggerBounding.height;\n            arrowTop = height - triggerBounding.height / 2 + \"px\";\n            break;\n        case \"left\":\n            left = triggerBounding.left;\n            arrowLeft = triggerBounding.width / 2 + \"px\";\n            break;\n        case \"right\":\n            left = triggerBounding.left - width + triggerBounding.width;\n            arrowLeft = width - triggerBounding.width / 2 + \"px\";\n            break;\n    }\n    top = args[0] === \"top\" ? top - offsetY : top + offsetY;\n    left = args[0] === \"left\" ? left - offsetX : left + offsetX;\n    return {\n        top: top,\n        left: left,\n        transform: transform,\n        arrowLeft: arrowLeft,\n        arrowTop: arrowTop\n    };\n};\nvar getTooltipBoundary = function getTooltipBoundary(keepTooltipInside) {\n    // add viewport\n    var boundingBox = {\n        top: 0,\n        left: 0,\n        /* eslint-disable-next-line no-undef */ width: window.innerWidth,\n        /* eslint-disable-next-line no-undef */ height: window.innerHeight\n    };\n    if (typeof keepTooltipInside === \"string\") {\n        /* eslint-disable-next-line no-undef */ var selector = document.querySelector(keepTooltipInside);\n        {\n            if (selector === null) throw new Error(keepTooltipInside + \" selector does not exist : keepTooltipInside must be a valid html selector 'class' or 'Id'  or a boolean value\");\n        }\n        if (selector !== null) boundingBox = selector.getBoundingClientRect();\n    }\n    return boundingBox;\n};\nvar calculatePosition = function calculatePosition(triggerBounding, ContentBounding, position, arrow, _ref2, keepTooltipInside) {\n    var offsetX = _ref2.offsetX, offsetY = _ref2.offsetY;\n    var bestCoords = {\n        arrowLeft: \"0%\",\n        arrowTop: \"0%\",\n        left: 0,\n        top: 0,\n        transform: \"rotate(135deg)\"\n    };\n    var i = 0;\n    var wrapperBox = getTooltipBoundary(keepTooltipInside);\n    var positions = Array.isArray(position) ? position : [\n        position\n    ]; // keepTooltipInside would be activated if the  keepTooltipInside exist or the position is Array\n    if (keepTooltipInside || Array.isArray(position)) positions = [].concat(positions, POSITION_TYPES); // add viewPort for WarpperBox\n    // wrapperBox.top = wrapperBox.top + window.scrollY;\n    // wrapperBox.left = wrapperBox.left + window.scrollX;\n    while(i < positions.length){\n        bestCoords = getCoordinatesForPosition(triggerBounding, ContentBounding, positions[i], arrow, {\n            offsetX: offsetX,\n            offsetY: offsetY\n        });\n        var contentBox = {\n            top: bestCoords.top,\n            left: bestCoords.left,\n            width: ContentBounding.width,\n            height: ContentBounding.height\n        };\n        if (contentBox.top <= wrapperBox.top || contentBox.left <= wrapperBox.left || contentBox.top + contentBox.height >= wrapperBox.top + wrapperBox.height || contentBox.left + contentBox.width >= wrapperBox.left + wrapperBox.width) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    return bestCoords;\n};\nvar popupIdCounter = 0;\nvar getRootPopup = function getRootPopup() {\n    var PopupRoot = document.getElementById(\"popup-root\");\n    if (PopupRoot === null) {\n        PopupRoot = document.createElement(\"div\");\n        PopupRoot.setAttribute(\"id\", \"popup-root\");\n        document.body.appendChild(PopupRoot);\n    }\n    return PopupRoot;\n};\nvar Popup = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var _ref$trigger = _ref.trigger, trigger = _ref$trigger === void 0 ? null : _ref$trigger, _ref$onOpen = _ref.onOpen, onOpen = _ref$onOpen === void 0 ? function() {} : _ref$onOpen, _ref$onClose = _ref.onClose, onClose = _ref$onClose === void 0 ? function() {} : _ref$onClose, _ref$defaultOpen = _ref.defaultOpen, defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen, _ref$open = _ref.open, open = _ref$open === void 0 ? undefined : _ref$open, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$nested = _ref.nested, nested = _ref$nested === void 0 ? false : _ref$nested, _ref$closeOnDocumentC = _ref.closeOnDocumentClick, closeOnDocumentClick = _ref$closeOnDocumentC === void 0 ? true : _ref$closeOnDocumentC, _ref$repositionOnResi = _ref.repositionOnResize, repositionOnResize = _ref$repositionOnResi === void 0 ? true : _ref$repositionOnResi, _ref$closeOnEscape = _ref.closeOnEscape, closeOnEscape = _ref$closeOnEscape === void 0 ? true : _ref$closeOnEscape, _ref$on = _ref.on, on = _ref$on === void 0 ? [\n        \"click\"\n    ] : _ref$on, _ref$contentStyle = _ref.contentStyle, contentStyle = _ref$contentStyle === void 0 ? {} : _ref$contentStyle, _ref$arrowStyle = _ref.arrowStyle, arrowStyle = _ref$arrowStyle === void 0 ? {} : _ref$arrowStyle, _ref$overlayStyle = _ref.overlayStyle, overlayStyle = _ref$overlayStyle === void 0 ? {} : _ref$overlayStyle, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, _ref$position = _ref.position, position = _ref$position === void 0 ? \"bottom center\" : _ref$position, _ref$modal = _ref.modal, modal = _ref$modal === void 0 ? false : _ref$modal, _ref$lockScroll = _ref.lockScroll, lockScroll = _ref$lockScroll === void 0 ? false : _ref$lockScroll, _ref$arrow = _ref.arrow, arrow = _ref$arrow === void 0 ? true : _ref$arrow, _ref$offsetX = _ref.offsetX, offsetX = _ref$offsetX === void 0 ? 0 : _ref$offsetX, _ref$offsetY = _ref.offsetY, offsetY = _ref$offsetY === void 0 ? 0 : _ref$offsetY, _ref$mouseEnterDelay = _ref.mouseEnterDelay, mouseEnterDelay = _ref$mouseEnterDelay === void 0 ? 100 : _ref$mouseEnterDelay, _ref$mouseLeaveDelay = _ref.mouseLeaveDelay, mouseLeaveDelay = _ref$mouseLeaveDelay === void 0 ? 100 : _ref$mouseLeaveDelay, _ref$keepTooltipInsid = _ref.keepTooltipInside, keepTooltipInside = _ref$keepTooltipInsid === void 0 ? false : _ref$keepTooltipInsid, children = _ref.children;\n    var _useState = React.useState(open || defaultOpen), isOpen = _useState[0], setIsOpen = _useState[1];\n    var triggerRef = React.useRef(null);\n    var contentRef = React.useRef(null);\n    var arrowRef = React.useRef(null);\n    var focusedElBeforeOpen = React.useRef(null);\n    var popupId = React.useRef(\"popup-\" + ++popupIdCounter);\n    var isModal = modal ? true : !trigger;\n    var timeOut = React.useRef(0);\n    useIsomorphicLayoutEffect(function() {\n        if (isOpen) {\n            focusedElBeforeOpen.current = document.activeElement;\n            setPosition();\n            focusContentOnOpen(); // for accessibility\n            lockScrolll();\n        } else {\n            resetScroll();\n        }\n        return function() {\n            clearTimeout(timeOut.current);\n        };\n    }, [\n        isOpen\n    ]); // for uncontrolled popup we need to sync isOpen with open prop\n    React.useEffect(function() {\n        if (typeof open === \"boolean\") {\n            if (open) openPopup();\n            else closePopup();\n        }\n    }, [\n        open,\n        disabled\n    ]);\n    var openPopup = function openPopup(event) {\n        if (isOpen || disabled) return;\n        setIsOpen(true);\n        setTimeout(function() {\n            return onOpen(event);\n        }, 0);\n    };\n    var closePopup = function closePopup(event) {\n        var _focusedElBeforeOpen$;\n        if (!isOpen || disabled) return;\n        setIsOpen(false);\n        if (isModal) (_focusedElBeforeOpen$ = focusedElBeforeOpen.current) === null || _focusedElBeforeOpen$ === void 0 ? void 0 : _focusedElBeforeOpen$.focus();\n        setTimeout(function() {\n            return onClose(event);\n        }, 0);\n    };\n    var togglePopup = function togglePopup(event) {\n        event === null || event === void 0 ? void 0 : event.stopPropagation();\n        if (!isOpen) openPopup(event);\n        else closePopup(event);\n    };\n    var onMouseEnter = function onMouseEnter(event) {\n        clearTimeout(timeOut.current);\n        timeOut.current = setTimeout(function() {\n            return openPopup(event);\n        }, mouseEnterDelay);\n    };\n    var onContextMenu = function onContextMenu(event) {\n        event === null || event === void 0 ? void 0 : event.preventDefault();\n        togglePopup();\n    };\n    var onMouseLeave = function onMouseLeave(event) {\n        clearTimeout(timeOut.current);\n        timeOut.current = setTimeout(function() {\n            return closePopup(event);\n        }, mouseLeaveDelay);\n    };\n    var lockScrolll = function lockScrolll() {\n        if (isModal && lockScroll) document.getElementsByTagName(\"body\")[0].style.overflow = \"hidden\"; // migrate to document.body\n    };\n    var resetScroll = function resetScroll() {\n        if (isModal && lockScroll) document.getElementsByTagName(\"body\")[0].style.overflow = \"auto\";\n    };\n    var focusContentOnOpen = function focusContentOnOpen() {\n        var _contentRef$current;\n        var focusableEls = contentRef === null || contentRef === void 0 ? void 0 : (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex=\"0\"]');\n        var firstEl = Array.prototype.slice.call(focusableEls)[0];\n        firstEl === null || firstEl === void 0 ? void 0 : firstEl.focus();\n    };\n    React.useImperativeHandle(ref, function() {\n        return {\n            open: function open() {\n                openPopup();\n            },\n            close: function close() {\n                closePopup();\n            },\n            toggle: function toggle() {\n                togglePopup();\n            }\n        };\n    }); // set Position\n    var setPosition = function setPosition() {\n        if (isModal || !isOpen) return;\n        if (!(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) || !(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) || !(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current)) return; /// show error as one of ref is undefined\n        var trigger = triggerRef.current.getBoundingClientRect();\n        var content = contentRef.current.getBoundingClientRect();\n        var cords = calculatePosition(trigger, content, position, arrow, {\n            offsetX: offsetX,\n            offsetY: offsetY\n        }, keepTooltipInside);\n        contentRef.current.style.top = cords.top + window.scrollY + \"px\";\n        contentRef.current.style.left = cords.left + window.scrollX + \"px\";\n        if (arrow && !!arrowRef.current) {\n            var _arrowStyle$top, _arrowStyle$left;\n            arrowRef.current.style.transform = cords.transform;\n            arrowRef.current.style.setProperty(\"-ms-transform\", cords.transform);\n            arrowRef.current.style.setProperty(\"-webkit-transform\", cords.transform);\n            arrowRef.current.style.top = ((_arrowStyle$top = arrowStyle.top) === null || _arrowStyle$top === void 0 ? void 0 : _arrowStyle$top.toString()) || cords.arrowTop;\n            arrowRef.current.style.left = ((_arrowStyle$left = arrowStyle.left) === null || _arrowStyle$left === void 0 ? void 0 : _arrowStyle$left.toString()) || cords.arrowLeft;\n        }\n    }; // hooks\n    useOnEscape(closePopup, closeOnEscape); // can be optimized if we disabled for hover\n    useTabbing(contentRef, isOpen && isModal);\n    useRepositionOnResize(setPosition, repositionOnResize);\n    useOnClickOutside(!!trigger ? [\n        contentRef,\n        triggerRef\n    ] : [\n        contentRef\n    ], closePopup, closeOnDocumentClick && !nested); // we need to add a ne\n    // render the trigger element and add events\n    var renderTrigger = function renderTrigger() {\n        var triggerProps = {\n            key: \"T\",\n            ref: triggerRef,\n            \"aria-describedby\": popupId.current\n        };\n        var onAsArray = Array.isArray(on) ? on : [\n            on\n        ];\n        for(var i = 0, len = onAsArray.length; i < len; i++){\n            switch(onAsArray[i]){\n                case \"click\":\n                    triggerProps.onClick = togglePopup;\n                    break;\n                case \"right-click\":\n                    triggerProps.onContextMenu = onContextMenu;\n                    break;\n                case \"hover\":\n                    triggerProps.onMouseEnter = onMouseEnter;\n                    triggerProps.onMouseLeave = onMouseLeave;\n                    break;\n                case \"focus\":\n                    triggerProps.onFocus = onMouseEnter;\n                    triggerProps.onBlur = onMouseLeave;\n                    break;\n            }\n        }\n        if (typeof trigger === \"function\") {\n            var comp = trigger(isOpen);\n            return !!trigger && React__default.cloneElement(comp, triggerProps);\n        }\n        return !!trigger && React__default.cloneElement(trigger, triggerProps);\n    };\n    var addWarperAction = function addWarperAction() {\n        var popupContentStyle = isModal ? Style.popupContent.modal : Style.popupContent.tooltip;\n        var childrenElementProps = {\n            className: \"popup-content \" + (className !== \"\" ? className.split(\" \").map(function(c) {\n                return c + \"-content\";\n            }).join(\" \") : \"\"),\n            style: _extends({}, popupContentStyle, contentStyle, {\n                pointerEvents: \"auto\"\n            }),\n            ref: contentRef,\n            onClick: function onClick(e) {\n                e.stopPropagation();\n            }\n        };\n        if (!modal && on.indexOf(\"hover\") >= 0) {\n            childrenElementProps.onMouseEnter = onMouseEnter;\n            childrenElementProps.onMouseLeave = onMouseLeave;\n        }\n        return childrenElementProps;\n    };\n    var renderContent = function renderContent() {\n        return React__default.createElement(\"div\", Object.assign({}, addWarperAction(), {\n            key: \"C\",\n            role: isModal ? \"dialog\" : \"tooltip\",\n            id: popupId.current\n        }), arrow && !isModal && React__default.createElement(\"div\", {\n            ref: arrowRef,\n            style: Style.popupArrow\n        }, React__default.createElement(\"svg\", {\n            \"data-testid\": \"arrow\",\n            className: \"popup-arrow \" + (className !== \"\" ? className.split(\" \").map(function(c) {\n                return c + \"-arrow\";\n            }).join(\" \") : \"\"),\n            viewBox: \"0 0 32 16\",\n            style: _extends({\n                position: \"absolute\"\n            }, arrowStyle)\n        }, React__default.createElement(\"path\", {\n            d: \"M16 0l16 16H0z\",\n            fill: \"currentcolor\"\n        }))), children && typeof children === \"function\" ? children(closePopup, isOpen) : children);\n    };\n    var overlay = !(on.indexOf(\"hover\") >= 0);\n    var ovStyle = isModal ? Style.overlay.modal : Style.overlay.tooltip;\n    var content = [\n        overlay && React__default.createElement(\"div\", {\n            key: \"O\",\n            \"data-testid\": \"overlay\",\n            \"data-popup\": isModal ? \"modal\" : \"tooltip\",\n            className: \"popup-overlay \" + (className !== \"\" ? className.split(\" \").map(function(c) {\n                return c + \"-overlay\";\n            }).join(\" \") : \"\"),\n            style: _extends({}, ovStyle, overlayStyle, {\n                pointerEvents: closeOnDocumentClick && nested || isModal ? \"auto\" : \"none\"\n            }),\n            onClick: closeOnDocumentClick && nested ? closePopup : undefined,\n            tabIndex: -1\n        }, isModal && renderContent()),\n        !isModal && renderContent()\n    ];\n    return React__default.createElement(React__default.Fragment, null, renderTrigger(), isOpen && ReactDOM.createPortal(content, getRootPopup()));\n});\nexports.Popup = Popup;\nexports[\"default\"] = Popup; //# sourceMappingURL=reactjs-popup.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/reactjs-popup/dist/reactjs-popup.cjs.development.js\n");

/***/ })

};
;